<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">

<dictionary title="UTM Terminology">

    <suite name="Standard Suite" code="????" description="Common classes and commands for all applications.">
        <access-group identifier="com.utmapp.UTM.vm-access" />

        <enumeration name="printing error handling" code="enum">
            <enumerator name="standard" code="lwst" description="Standard PostScript error handling">
                <cocoa boolean-value="NO"/>
            </enumerator>
            <enumerator name="detailed" code="lwdt" description="print a detailed report of PostScript errors">
                <cocoa boolean-value="YES"/>
            </enumerator>
        </enumeration>
        
        <command name="close" code="coreclos" description="Close a document.">
            <cocoa class="NSCloseCommand"/>
            <access-group identifier="*"/>
            <direct-parameter type="specifier" requires-access="r" description="the document(s) or window(s) to close."/>
        </command>

        <command name="quit" code="aevtquit" description="Quit the application.">
            <cocoa class="NSQuitCommand"/>
        </command>

        <command name="count" code="corecnte" description="Return the number of elements of a particular class within an object.">
            <cocoa class="NSCountCommand"/>
            <access-group identifier="*"/>
            <direct-parameter type="specifier" requires-access="r" description="The objects to be counted."/>
            <parameter name="each" code="kocl" type="type" optional="yes" description="The class of objects to be counted." hidden="yes">
                <cocoa key="ObjectClass"/>
            </parameter>
            <result type="integer" description="The count."/>
        </command>

        <command name="exists" code="coredoex" description="Verify that an object exists.">
            <cocoa class="NSExistsCommand"/>
            <access-group identifier="*"/>
            <direct-parameter type="any" requires-access="r" description="The object(s) to check."/>
            <result type="boolean" description="Did the object(s) exist?"/>
        </command>

        <class name="application" code="capp" description="The application's top-level scripting object.">
            <cocoa class="NSApplication"/>
            <property name="name" code="pnam" type="text" access="r" description="The name of the application."/>
            <property name="frontmost" code="pisf" type="boolean" access="r" description="Is this the active application?">
                <cocoa key="isActive"/>
            </property>
            <property name="version" code="vers" type="text" access="r" description="The version number of the application."/>
            <element type="window" access="r">
                <cocoa key="orderedWindows"/>
            </element>
            <responds-to command="quit">
                <cocoa method="handleQuitScriptCommand:"/>
            </responds-to>
        </class>

        <class name="window" code="cwin" description="A window.">
            <cocoa class="NSWindow"/>
            <property name="name" code="pnam" type="text" access="r" description="The title of the window.">
                <cocoa key="title"/>
            </property>
            <property name="id" code="ID  " type="integer" access="r" description="The unique identifier of the window.">
                <cocoa key="uniqueID"/>
            </property>
            <property name="index" code="pidx" type="integer" description="The index of the window, ordered front to back.">
                <cocoa key="orderedIndex"/>
            </property>
            <property name="bounds" code="pbnd" type="rectangle" description="The bounding rectangle of the window.">
                <cocoa key="boundsAsQDRect"/>
            </property>
            <property name="closeable" code="hclb" type="boolean" access="r" description="Does the window have a close button?">
                <cocoa key="hasCloseBox"/>
            </property>
            <property name="miniaturizable" code="ismn" type="boolean" access="r" description="Does the window have a minimize button?">
                <cocoa key="isMiniaturizable"/>
            </property>
            <property name="miniaturized" code="pmnd" type="boolean" description="Is the window minimized right now?">
                <cocoa key="isMiniaturized"/>
            </property>
            <property name="resizable" code="prsz" type="boolean" access="r" description="Can the window be resized?">
                <cocoa key="isResizable"/>
            </property>
            <property name="visible" code="pvis" type="boolean" description="Is the window visible right now?">
                <cocoa key="isVisible"/>
            </property>
            <property name="zoomable" code="iszm" type="boolean" access="r" description="Does the window have a zoom button?">
                <cocoa key="isZoomable"/>
            </property>
            <property name="zoomed" code="pzum" type="boolean" description="Is the window zoomed right now?">
                <cocoa key="isZoomed"/>
            </property>
            <responds-to command="close">
                <cocoa method="handleCloseScriptCommand:"/>
            </responds-to>
        </class>

    </suite>
    
    <suite name="UTM Suite" code="UTMs" description="UTM virtual machines scripting suite.">
        <access-group identifier="com.utmapp.UTM.vm-access" />
        
        <class-extension extends="application" description="An application's top level scripting object.">
          <element type="virtual machine" access="r">
            <cocoa key="scriptingVirtualMachines"/>
          </element>
          <property name="auto terminate" code="kRlW" type="boolean" description="Auto terminate the application when all windows are closed?">
              <cocoa key="isAutoTerminate"/>
          </property>
        </class-extension>
        
        <enumeration name="backend" code="VmEb" description="Backend type.">
            <enumerator name="apple" code="ApPl" description="Apple Virtualization.framework backend."/>
            <enumerator name="qemu" code="QeMu" description="QEMU backend."/>
            <enumerator name="unavailable" code="UnAv" description="The virtual machine is not currently available."/>
        </enumeration>
        
        <enumeration name="status" code="VmEs" description="Status type.">
            <enumerator name="stopped" code="StSa" description="VM is not running."/>
            <enumerator name="starting" code="StSb" description="VM is starting up."/>
            <enumerator name="started" code="StSc" description="VM is running."/>
            <enumerator name="pausing" code="StSd" description="VM is going to pause."/>
            <enumerator name="paused" code="StSe" description="VM is paused."/>
            <enumerator name="resuming" code="StSf" description="VM is resuming from pause."/>
            <enumerator name="stopping" code="StSg" description="VM is stopping."/>
        </enumeration>
        
        <enumeration name="stop method" code="VmEs" description="Stop by method.">
            <enumerator name="force" code="FoRc" description="Force stop VM by sending stop request to the backend."/>
            <enumerator name="kill" code="KiLl" description="Force kill VM by terminating the backend."/>
            <enumerator name="request" code="ReQu" description="Send a power down request to the guest OS which may be ignored."/>
        </enumeration>
        
        <enumeration name="serial interface" code="VmEr" description="Serial port interface.">
            <enumerator name="ptty" code="PtTy" description="Pseudo TTY port."/>
            <enumerator name="tcp" code="TcP " description="TCP port."/>
            <enumerator name="unavailable" code="IUnA" description="Serial interface is currently unavailable or is in use by the GUI."/>
        </enumeration>
        
        <command name="start" code="UTMvstar" description="Start a virtual machine or resume a suspended virtual machine.">
          <direct-parameter description="Virtual machine to start." type="virtual machine"/>
          <parameter name="saving" code="SaVe" description="When false, do not save the VM changes to disk. Default value is true." type="boolean" optional="yes">
            <cocoa key="saveFlag"/>
          </parameter>
        </command>
        
        <command name="suspend" code="UTMvsusp" description="Suspend a running virtual machine to memory.">
          <direct-parameter description="Virtual machine to suspend." type="virtual machine"/>
          <parameter name="saving" code="SaVe" description="Save VM state to disk after suspend. Default value is false." type="boolean" optional="yes">
            <cocoa key="saveFlag"/>
          </parameter>
        </command>
        
        <command name="stop" code="UTMvstop" description="Shuts down a running virtual machine.">
          <direct-parameter description="Virtual machine to stop." type="virtual machine"/>
          <parameter name="by" code="StBy" description="Method to stop the VM." type="stop method" optional="yes">
            <cocoa key="stopBy"/>
          </parameter>
        </command>
        
        <class name="virtual machine" code="UTMv" description="A virtual machine registered in UTM." plural="virtual machines">
          <cocoa class="UTMScriptingVirtualMachineImpl"/>

          <property name="id" code="ID  " type="text" access="r"
            description="The unique identifier of the VM."/>

          <property name="name" code="pnam" type="text" access="r"
            description="The name of the VM."/>
            
          <property name="notes" code="VmNo" type="text" access="r"
            description="User specified notes."/>
            
          <property name="machine" code="VmTa" type="text" access="r"
            description="Target machine name."/>
            
          <property name="architecture" code="VmAr" type="text" access="r"
            description="Target architecture name."/>
            
          <property name="memory" code="VmMe" type="text" access="r"
            description="RAM size."/>
            
          <property name="backend" code="VmBa" type="backend" access="r"
            description="Emulation/virtualization engine used."/>
            
          <property name="status" code="VmSt" type="status" access="r"
            description="Current running status."/>

          <element type="serial port" access="r"
            description="Serial ports exposed by the guest to the host to access.">
            <cocoa key="serialPorts"/>
          </element>
          
          <responds-to command="start">
            <cocoa method="start:"/>
          </responds-to>
          
          <responds-to command="suspend">
            <cocoa method="suspend:"/>
          </responds-to>
          
          <responds-to command="stop">
            <cocoa method="stop:"/>
          </responds-to>
          
        </class>
        
        <class name="serial port" code="SeRi" description="A serial port in the guest that can be connected to from the host." plural="serial ports">
          <cocoa class="UTMScriptingSerialPortImpl"/>
          <property name="id" code="ID  " type="integer" access="r"
            description="The unique identifier of the tag."/>
          
          <property name="interface" code="SeRf" type="serial interface" access="r"
            description="The type of serial interface on the host."/>
            
          <property name="address" code="SeRa" type="text" access="r"
            description="Host address of the serial port (determined by the interface type)."/>
            
          <property name="port" code="SeRp" type="integer" access="r"
            description="Port number of the serial port (not used in some interface types)."/>
        </class>
    </suite>
    
    <suite name="UTM Guest Suite" code="UTMg" description="UTM virtual machine guest scripting suite. In order to use these commands, QEMU guest agent must be running.">
        <access-group identifier="com.utmapp.UTM.vm-access" />
        
        <class-extension extends="virtual machine" description="Guest agent access.">
            <element type="guest file" access="r"
              description="Open files for this virtual machine from the guest agent.">
              <cocoa key="openFiles"/>
            </element>
            
            <element type="guest process" access="r"
              description="Processe executed on this virtual machine from the guest agent.">
              <cocoa key="processes"/>
            </element>
            
            <responds-to command="open file">
              <cocoa method="openFile:"/>
            </responds-to>
            <responds-to command="execute">
              <cocoa method="execute:"/>
            </responds-to>
            <responds-to command="query ip">
              <cocoa method="queryIp:"/>
            </responds-to>
        </class-extension>
        
        <enumeration name="open mode" code="OpMo" description="File open mode.">
            <enumerator name="reading" code="OpRo" description="Open the file as read only. The file must exist."/>
            <enumerator name="writing" code="OpWo" description="Open the file for writing. If the file does not exist, it will be created. If the file exists, it will be overwritten."/>
            <enumerator name="appending" code="OpAp" description="Open the file for writing at the end. Offsets are ignored for writes. If the file does not exist, it will be created."/>
        </enumeration>
        
        <command name="open file" code="UTMgOpEn" description="Open a file on the guest. You must close the file when you are done to prevent leaking guest resources.">
          <direct-parameter description="Virtual machine of the guest." type="virtual machine"/>
          <parameter name="at" code="OpPt" description="The guest path of the file to open." type="text">
            <cocoa key="path"/>
          </parameter>
          <parameter name="for" code="OpMd" description="Open mode." type="open mode" optional="yes">
            <cocoa key="mode"/>
          </parameter>
          <parameter name="updating" code="OpAp" description="If true, will open for both reading and writing. The file existance requirement and creation is still governed by the open mode. Default is false." type="boolean" optional="yes">
            <cocoa key="isUpdate"/>
          </parameter>
          <result type="guest file" description="Guest file to operate on."/>
        </command>
        
        <command name="execute" code="UTMgExEc" description="Execute a command or script on the guest.">
          <direct-parameter description="Virtual machine of the guest." type="virtual machine"/>
          <parameter name="at" code="ExPt" description="Either the full path of the executable to run or an executable found in the guest's PATH environment." type="text">
            <cocoa key="path"/>
          </parameter>
          <parameter name="with arguments" code="ExAg" description="List of arguments to pass to the executable." optional="yes">
            <cocoa key="argv"/>
            <type type="text" list="yes"/>
          </parameter>
          <parameter name="with environment" code="ExEv" description="List of environment variables to pass to the executable. Each entry should be in the format NAME=VALUE." optional="yes">
            <cocoa key="envp"/>
            <type type="text" list="yes"/>
          </parameter>
          <parameter name="using input" code="ExIn" description="Data to feed into the process's standard input. If using base64 encoding, this should be a valid base64 string." type="text" optional="yes">
            <cocoa key="input"/>
          </parameter>
          <parameter name="base64 encoding" code="Ex64" description="Input data is base64 encoded. The data will be decoded before being passed to the executable. Default is false." type="boolean" optional="yes">
            <cocoa key="isBase64Encoded"/>
          </parameter>
          <parameter name="output capturing" code="ExOc" description="If true, the standard output and error will be captured and accessible in the returned object. You need to call update on the object to get the data. Default is false." type="boolean" optional="yes">
            <cocoa key="isCaptureOutput"/>
          </parameter>
          <result type="guest process" description="Guest process that can be used to fetch the return value and outputs (if captured)."/>
        </command>
        
        <command name="query ip" code="UTMgIpAd" description="Query the guest for all IP addresses on its network interfaces (excluding loopback).">
          <direct-parameter description="Virtual machine of the guest." type="virtual machine"/>
          <result description="List of IP addresses on all network interfaces (excluding loopback). Both IPv4 and IPv6 addresses can be returned. IPv4 addresses will show up before IPv6 addresses if any are available.">
            <type type="text" list="yes"/>
          </result>
        </command>
        
        <class name="guest file" code="GuFi" description="A file that resides on the guest." plural="guest files">
          <cocoa class="UTMScriptingGuestFileImpl"/>
          <property name="id" code="ID  " type="integer" access="r"
            description="The handle for the file."/>
            
          <responds-to command="read">
            <cocoa method="read:"/>
          </responds-to>
          
          <responds-to command="pull">
            <cocoa method="pull:"/>
          </responds-to>
          
          <responds-to command="write">
            <cocoa method="write:"/>
          </responds-to>
          
          <responds-to command="push">
            <cocoa method="push:"/>
          </responds-to>
          
          <responds-to command="close">
            <cocoa method="close:"/>
          </responds-to>
        </class>
        
        <enumeration name="whence" code="WeCe" description="Where to offset from.">
            <enumerator name="start position" code="StRt" description="The start of the file (only positive offsets)."/>
            <enumerator name="current position" code="CuRr" description="The current pointer (both positive and negative offsets)."/>
            <enumerator name="end position" code="UnAv" description="The end of the file (only negative offsets for reads, both for writes)."/>
        </enumeration>
        
        <command name="read" code="GuFiReAd" description="Reads text data from a guest file.">
          <direct-parameter description="Guest file to read." type="guest file"/>
          <parameter name="at offset" code="RdOf" description="Specify the offset to start reading from. Default value is zero." type="integer" optional="yes">
            <cocoa key="offset"/>
          </parameter>
          <parameter name="from" code="RdWh" description="Specify where the offset is from. Default value is from the current file pointer." type="whence" optional="yes">
            <cocoa key="whence"/>
          </parameter>
          <parameter name="for length" code="RdLn" description="Amount of bytes to read. The limit is 48 MB. Default is to read until the end." type="integer" optional="yes">
            <cocoa key="length"/>
          </parameter>
          <parameter name="base64 encoding" code="Rd64" description="If true, then the result will be base64 encoded. This is recommended if you are reading a binary file. Default is false." type="boolean" optional="yes">
            <cocoa key="isBase64Encoded"/>
          </parameter>
          <parameter name="closing" code="RdCl" description="If true, the file will be closed after reading and must be opened again to perform more operations. If false, you can perform multiple reads on the same open file. The default is true." type="boolean" optional="yes">
            <cocoa key="isClosing"/>
          </parameter>
          <result type="text" description="Data read from the guest file."/>
        </command>
        
        <command name="pull" code="GuFiPuLl" description="Pulls a file from the guest to the host.">
          <direct-parameter description="Guest file to pull." type="guest file"/>
          <parameter name="to" code="kfil" description="The host file in which to save the guest file." type="file">
            <cocoa key="file"/>
          </parameter>
          <parameter name="closing" code="PlCl" description="If true, the file will be closed after reading and must be opened again to perform more operations. If false, you can perform multiple reads on the same open file. The default is true." type="boolean" optional="yes">
            <cocoa key="isClosing"/>
          </parameter>
        </command>
        
        <command name="write" code="GuFiWrIt" description="Writes text data to a guest file.">
          <direct-parameter description="Guest file to write." type="guest file"/>
          <parameter name="with data" code="WrDt" description="Data to write to the guest file. If base64 encoding is specified, this should be a valid base64 string which will be decoded before writing." type="text">
            <cocoa key="data"/>
          </parameter>
          <parameter name="at offset" code="WrOf" description="Specify the offset to start writing to. Default value is zero." type="integer" optional="yes">
            <cocoa key="offset"/>
          </parameter>
          <parameter name="from" code="WrWh" description="Specify where the offset is from. Default value is from the current file pointer." type="whence" optional="yes">
            <cocoa key="whence"/>
          </parameter>
          <parameter name="base64 encoding" code="Wr64" description="If true, then the input data is base64 encoded. This is recommended if you are writing a binary file. Default is false." type="boolean" optional="yes">
            <cocoa key="isBase64Encoded"/>
          </parameter>
          <parameter name="closing" code="WrCl" description="If true, the file will be closed after writing and must be opened again to perform more operations. If false, you can perform multiple reads on the same open file. The default is true." type="boolean" optional="yes">
            <cocoa key="isClosing"/>
          </parameter>
        </command>
        
        <command name="push" code="GuFiPuSh" description="Pushes a file from the host to the guest and closes it.">
          <direct-parameter description="Guest file to push." type="guest file"/>
          <parameter name="from" code="kfil" description="The host file in which to send to the guest." type="file">
            <cocoa key="file"/>
          </parameter>
          <parameter name="closing" code="PsCl" description="If true, the file will be closed after writing and must be opened again to perform more operations. If false, you can perform multiple reads on the same open file. The default is true." type="boolean" optional="yes">
            <cocoa key="isClosing"/>
          </parameter>
        </command>
        
        <command name="close" code="GuFiClOs" description="Closes the file and prevent further operations.">
          <direct-parameter description="Guest file to close." type="guest file"/>
        </command>
        
        <class name="guest process" code="GuPr" description="A process on the guest." plural="guest processes">
          <cocoa class="UTMScriptingGuestProcessImpl"/>
          <property name="id" code="ID  " type="integer" access="r"
            description="The PID of the process."/>
          
          <responds-to command="get result">
            <cocoa method="getResult:"/>
          </responds-to>
        </class>
        
        <record-type name="execute result" code="ExRs" description="Process results after execution.">
          <property name="exited" code="GuEx" type="boolean" access="r"
            description="If true, the process has terminated.">
            <cocoa key="hasExited" />
          </property>
            
          <property name="exit code" code="GuEc" type="integer" access="r"
            description="Exit code if it was normally terminated."/>
            
          <property name="signal code" code="GuSg" type="integer" access="r"
            description="Signal number (Linux) or unhandled exception code (Windows) if the process was abnormally terminated."/>
            
          <property name="output text" code="GuOt" type="text" access="r"
            description="If capture is enabled, the stdout of the process as text."/>
            
          <property name="error text" code="GuEr" type="text" access="r"
            description="If capture is enabled, the stderr of the process as text."/>
            
          <property name="output data" code="GuOd" type="text" access="r"
            description="If capture is enabled, the stdout of the process as base64 encoded data."/>
            
          <property name="error data" code="GuEd" type="text" access="r"
            description="If capture is enabled, the stderr of the process as base64 encoded data."/>
        </record-type>
        
        <command name="get result" code="GuPrGeRs" description="Fetch execution result from the guest.">
          <direct-parameter description="Guest process to fetch result from." type="guest process"/>
          <result type="execute result" description="Result from the guest."/>
        </command>
    </suite>
</dictionary>
